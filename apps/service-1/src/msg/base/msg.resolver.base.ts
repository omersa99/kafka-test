/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMsgArgs } from "./CreateMsgArgs";
import { UpdateMsgArgs } from "./UpdateMsgArgs";
import { DeleteMsgArgs } from "./DeleteMsgArgs";
import { MsgCountArgs } from "./MsgCountArgs";
import { MsgFindManyArgs } from "./MsgFindManyArgs";
import { MsgFindUniqueArgs } from "./MsgFindUniqueArgs";
import { Msg } from "./Msg";
import { MsgService } from "../msg.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Msg)
export class MsgResolverBase {
  constructor(
    protected readonly service: MsgService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Msg",
    action: "read",
    possession: "any",
  })
  async _msgsMeta(
    @graphql.Args() args: MsgCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Msg])
  @nestAccessControl.UseRoles({
    resource: "Msg",
    action: "read",
    possession: "any",
  })
  async msgs(@graphql.Args() args: MsgFindManyArgs): Promise<Msg[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Msg, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Msg",
    action: "read",
    possession: "own",
  })
  async msg(@graphql.Args() args: MsgFindUniqueArgs): Promise<Msg | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Msg)
  @nestAccessControl.UseRoles({
    resource: "Msg",
    action: "create",
    possession: "any",
  })
  async createMsg(@graphql.Args() args: CreateMsgArgs): Promise<Msg> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Msg)
  @nestAccessControl.UseRoles({
    resource: "Msg",
    action: "update",
    possession: "any",
  })
  async updateMsg(@graphql.Args() args: UpdateMsgArgs): Promise<Msg | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Msg)
  @nestAccessControl.UseRoles({
    resource: "Msg",
    action: "delete",
    possession: "any",
  })
  async deleteMsg(@graphql.Args() args: DeleteMsgArgs): Promise<Msg | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
